import dash
import dash_bootstrap_components as dbc
from dash import Output, Input, State, dcc
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from generators import CholeskyGenerator
from sklearn.linear_model import SGDRegressor
import numpy as np

corr = np.array([[1.        , 0.30290135, 0.21246532, 0.04799231, 0.13755437,
        0.4440285 , 0.0709451 , 0.18547365, 0.2632338 , 0.2274558 ,
        0.37945399, 0.4796246 , 0.32912773, 0.36609748, 0.28985867,
        0.10728289, 0.39058766],
       [0.30290135, 1.        , 0.37946308, 0.2943388 , 0.12599901,
        0.14185567, 0.17136856, 0.29009934, 0.42390834, 0.38396325,
        0.331362  , 0.18506318, 0.08420095, 0.31482716, 0.40626986,
        0.47467224, 0.43213282],
       [0.21246532, 0.37946308, 1.        , 0.02433988, 0.07661171,
        0.19042013, 0.19662708, 0.0059926 , 0.23683899, 0.13583391,
        0.15011676, 0.17488565, 0.07033229, 0.05989055, 0.00541896,
        0.37569505, 0.00706356],
       [0.04799231, 0.2943388 , 0.02433988, 1.        , 0.22401577,
        0.04063273, 0.15535325, 0.29292687, 0.04822918, 0.15286035,
        0.17089178, 0.02988303, 0.04863444, 0.16771492, 0.03572266,
        0.06124525, 0.29766137],
       [0.13755437, 0.12599901, 0.07661171, 0.22401577, 1.        ,
        0.33630099, 0.10629735, 0.41540617, 0.28560315, 0.41935908,
        0.29685409, 0.21552276, 0.28311587, 0.13947444, 0.46216237,
        0.22809377, 0.24518168],
       [0.4440285 , 0.14185567, 0.19042013, 0.04063273, 0.33630099,
        1.        , 0.03752918, 0.13287529, 0.38551042, 0.41828367,
        0.01330897, 0.19073227, 0.49846631, 0.21408692, 0.47279117,
        0.12650513, 0.34077946],
       [0.0709451 , 0.17136856, 0.19662708, 0.15535325, 0.10629735,
        0.03752918, 1.        , 0.47593585, 0.1433134 , 0.13737418,
        0.28696799, 0.23854971, 0.11898178, 0.03500974, 0.08147369,
        0.23215153, 0.22057213],
       [0.18547365, 0.29009934, 0.0059926 , 0.29292687, 0.41540617,
        0.13287529, 0.47593585, 1.        , 0.10355255, 0.45188253,
        0.11120508, 0.44434862, 0.30281276, 0.17659401, 0.17468626,
        0.39649093, 0.32849715],
       [0.2632338 , 0.42390834, 0.23683899, 0.04822918, 0.28560315,
        0.38551042, 0.1433134 , 0.10355255, 1.        , 0.3047188 ,
        0.24326321, 0.37136062, 0.29104461, 0.36169324, 0.47882543,
        0.47474284, 0.05628289],
       [0.2274558 , 0.38396325, 0.13583391, 0.15286035, 0.41935908,
        0.41828367, 0.13737418, 0.45188253, 0.3047188 , 1.        ,
        0.01796875, 0.39563688, 0.32794293, 0.42262828, 0.37081167,
        0.17772079, 0.19771806],
       [0.37945399, 0.331362  , 0.15011676, 0.17089178, 0.29685409,
        0.01330897, 0.28696799, 0.11120508, 0.24326321, 0.01796875,
        1.        , 0.03526464, 0.09865544, 0.17110557, 0.04012283,
        0.38178753, 0.26982495],
       [0.4796246 , 0.18506318, 0.17488565, 0.02988303, 0.21552276,
        0.19073227, 0.23854971, 0.44434862, 0.37136062, 0.39563688,
        0.03526464, 1.        , 0.15990371, 0.28101884, 0.2359216 ,
        0.34957996, 0.40068866],
       [0.32912773, 0.08420095, 0.07033229, 0.04863444, 0.28311587,
        0.49846631, 0.11898178, 0.30281276, 0.29104461, 0.32794293,
        0.09865544, 0.15990371, 1.        , 0.27715129, 0.01907927,
        0.25338546, 0.00168206],
       [0.36609748, 0.31482716, 0.05989055, 0.16771492, 0.13947444,
        0.21408692, 0.03500974, 0.17659401, 0.36169324, 0.42262828,
        0.17110557, 0.28101884, 0.27715129, 1.        , 0.43740864,
        0.32440398, 0.13845916],
       [0.28985867, 0.40626986, 0.00541896, 0.03572266, 0.46216237,
        0.47279117, 0.08147369, 0.17468626, 0.47882543, 0.37081167,
        0.04012283, 0.2359216 , 0.01907927, 0.43740864, 1.        ,
        0.24443538, 0.3875942 ],
       [0.10728289, 0.47467224, 0.37569505, 0.06124525, 0.22809377,
        0.12650513, 0.23215153, 0.39649093, 0.47474284, 0.17772079,
        0.38178753, 0.34957996, 0.25338546, 0.32440398, 0.24443538,
        1.        , 0.00995751],
       [0.39058766, 0.43213282, 0.00706356, 0.29766137, 0.24518168,
        0.34077946, 0.22057213, 0.32849715, 0.05628289, 0.19771806,
        0.26982495, 0.40068866, 0.00168206, 0.13845916, 0.3875942 ,
        0.00995751, 1.        ]])

plot_shape = (4, 4)

df = pd.DataFrame([], columns=['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'y'])
generator = CholeskyGenerator(corr=corr, shifts=np.zeros(17), mults=[-5, 1, -2, 4, 3, 2, 4, -3, -1, 0.3, 0.1, 5, 1.3, 0.8, -0.3, 2.1, 1.1])

app = dash.Dash(
    external_stylesheets=[dbc.themes.BOOTSTRAP]
)

app.layout = dbc.Card([
    dbc.CardHeader("Generated Data"),
    dbc.CardBody([
        dcc.Graph(id='main-graph', style={'width': '90vh', 'height': '90vh'}),
        dcc.Interval(id='graph-timer', interval=100)
    ])
])

def draw_slope_line_at_point(fig, y, slope, plot_index):
    x_vals = np.linspace(-15, 15, 100)
    y_vals = x_vals * float(slope) + y
    
    fig.add_trace(
            go.Scatter(
                x=x_vals, 
                y=y_vals,
            ), col=plot_index % plot_shape[0] + 1, row=plot_index // plot_shape[1] + 1
        )
    
    return x_vals, y_vals

@app.callback(
    Output("main-graph", "figure"),
    Input("graph-timer", "n_intervals"),
)
def graph_update(n):
    df.loc[len(df)] = generator.get().flatten()
    classifier = SGDRegressor(max_iter=1000).fit(df.drop(columns='y'), df['y'])

    df2 = df.copy()
    df2 = pd.melt(df2, id_vars='y')

    fig = px.scatter(df2, x='value', y='y', facet_col='variable', facet_col_wrap=plot_shape[0])
    for i, coef in enumerate(classifier.coef_):
        draw_slope_line_at_point(fig, 0, float(coef), i)
    fig.layout.height = 1200

    return fig


if __name__ == "__main__":
    app.run_server()
